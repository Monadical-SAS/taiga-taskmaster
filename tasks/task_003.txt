# Task ID: 3
# Title: Implement Authentication and HTTP Client
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Create a Taiga API layer with authentication handling and implement necessary API endpoints following the interface-implementation pattern.
# Details:
see taiga-api/docs/todos/1-robust-auth/README.md for more info. you have to look at it and its references before proceeding.
 1. Create separate packages:
   - taiga-api-interface: Define interfaces for Taiga API endpoints
   - taiga-api: Implement the interfaces with HTTP client
2. Implement authentication for Taiga API:
   - Normal login with Bearer token authentication
   - Auth header generation
3. Implement the following API endpoints based on Taiga API docs:
   - Tasks (list, create, get, update, delete)
   - User Stories (list, create, get, update, delete)
   - Task Statuses (list, create, get, update, delete)
   - Task Custom Attributes (list, create, get, update, delete)
4. Add proper error handling and logging
5. Use Effect Schema for validation of API responses
6. Create TypeScript interfaces for all API models
7. Follow the established interface-driven approach in the project architecture

Reference the Taiga API documentation from the docs/ directory for implementation details.

# Test Strategy:
1. Unit test the HTTP client creation with different base URLs
2. Test auth header generation with token configurations
3. Mock API responses for each implemented endpoint
4. Test error handling for various API error scenarios
5. Verify schema validation works correctly for API responses
6. Test each CRUD operation for all implemented endpoints
7. Verify the implementation conforms to the established interfaces
8. Test authentication flow with mock responses

# Subtasks:
## 3.1. Implement HTTP client factory [done]
### Dependencies: None
### Description: Create a factory function that returns an HTTP client instance with proper configuration
### Details:


## 3.2. Implement authentication utilities [done]
### Dependencies: None
### Description: Create utilities for generating auth headers and refreshing tokens
### Details:


## 3.5. Create taiga-api-interface package [done]
### Dependencies: None
### Description: Define interfaces for all required Taiga API endpoints and models
### Details:


## 3.6. Create taiga-api package [done]
### Dependencies: None
### Description: Implement the interfaces defined in taiga-api-interface
### Details:


## 3.7. Implement Tasks API endpoints [done]
### Dependencies: None
### Description: Implement CRUD operations for Tasks API
### Details:


## 3.8. Implement User Stories API endpoints [done]
### Dependencies: None
### Description: Implement CRUD operations for User Stories API
### Details:


## 3.9. Implement Task Statuses API endpoints [done]
### Dependencies: None
### Description: Implement CRUD operations for Task Statuses API
### Details:


## 3.11. Create Effect Schema validators [done]
### Dependencies: None
### Description: Implement validators for all API responses using Effect Schema
### Details:


## 3.12. Create unit tests [done]
### Dependencies: None
### Description: Write comprehensive tests for all API endpoint implementations
### Details:


