# Task ID: 15
# Title: Create Documentation and Deployment Guide
# Status: pending
# Dependencies: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
# Priority: medium
# Description: Create comprehensive documentation for the system, including setup, usage, and deployment instructions.
# Details:
Create comprehensive documentation:

1. Create `README.md`:
```markdown
# Taiga-Task-Master System

An automated system for converting Product Requirement Documents (PRDs) into tracked Taiga tasks with nested subtasks, using a tag-based identification system and atomic Markdown rendering.

## Features

- Webhook receiver for PRD updates from Taiga
- Automated task generation from PRD content
- Synchronization with Taiga tasks
- Tag-based task identification
- Markdown rendering with dependency visualization
- CLI for manual operations

## Architecture

The system consists of three main modules:

1. **PRD Webhook Receiver**: Receives PRD updates from Taiga
2. **Task Generation Service**: Generates tasks from PRD content
3. **Taiga Synchronizer**: Synchronizes tasks with Taiga

## Installation

### Prerequisites

- Node.js 18 or higher
- Python 3.8 or higher (for claude-task-master)
- Taiga instance with API access

### Using npm

```bash
# Clone the repository
git clone https://github.com/your-org/taiga-task-master.git
cd taiga-task-master

# Install dependencies
npm install

# Build the application
npm run build
```

### Using Docker

```bash
# Clone the repository
git clone https://github.com/your-org/taiga-task-master.git
cd taiga-task-master

# Build Docker image
npm run docker:build

# Run with Docker Compose
docker-compose up -d
```

## Configuration

Create a `.env` file in the root directory with the following variables:

```env
# Server configuration
PORT=3000
NODE_ENV=production

# Taiga API configuration
TAIGA_API_URL=https://api.taiga.io/api/v1
TAIGA_AUTH_TOKEN=your-auth-token
TAIGA_TOKEN_TYPE=Bearer

# Project configuration
PROJECT_ID=12345
PROJECT_SLUG=your-project-slug
PRD_SWIMLANE_ID=67890

# Webhook configuration
WEBHOOK_SECRET=your-webhook-secret

# Task generation configuration
CLAUDE_TASK_MASTER_PATH=/path/to/claude-task-master
```

## Usage

### Running the Server

```bash
npm start
```

### Using the CLI

```bash
# Generate tasks from a PRD file
npm run cli -- generate path/to/prd.txt -o tasks.json

# Sync tasks with Taiga
npm run cli -- sync tasks.json -p 12345
```

## API Endpoints

### POST /api/prd-webhook

Receives PRD updates from Taiga and initiates task generation.

**Headers:**
- `Authorization: Bearer <jwt-token>`

**Request Body:**
```json
{
  "project": 12345,
  "ref": 67890,
  "content": "PRD content..."
}
```

## Development

```bash
# Run in development mode
npm run dev

# Run tests
npm test

# Run tests with coverage
npm run test:coverage
```

## License

MIT
```

2. Create `DEPLOYMENT.md`:
```markdown
# Deployment Guide

This guide provides instructions for deploying the Taiga-Task-Master system in various environments.

## Prerequisites

- Node.js 18 or higher
- Python 3.8 or higher (for claude-task-master)
- Taiga instance with API access
- Docker and Docker Compose (for containerized deployment)

## Environment Variables

The following environment variables are required for deployment:

| Variable | Description | Example |
|----------|-------------|--------|
| PORT | Server port | 3000 |
| NODE_ENV | Environment (development/production) | production |
| TAIGA_API_URL | Taiga API URL | https://api.taiga.io/api/v1 |
| TAIGA_AUTH_TOKEN | Taiga authentication token | your-auth-token |
| TAIGA_TOKEN_TYPE | Token type | Bearer |
| PROJECT_ID | Taiga project ID | 12345 |
| PROJECT_SLUG | Taiga project slug | your-project-slug |
| PRD_SWIMLANE_ID | ID of the PRD swimlane | 67890 |
| WEBHOOK_SECRET | Secret for JWT validation | your-webhook-secret |
| CLAUDE_TASK_MASTER_PATH | Path to claude-task-master | /usr/bin/claude-task-master |

## Deployment Options

### Docker Deployment

1. Build the Docker image:
   ```bash
   npm run docker:build
   ```

2. Create a `.env` file with the required environment variables.

3. Run with Docker Compose:
   ```bash
   docker-compose up -d
   ```

### Manual Deployment

1. Clone the repository:
   ```bash
   git clone https://github.com/your-org/taiga-task-master.git
   cd taiga-task-master
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Build the application:
   ```bash
   npm run build
   ```

4. Create a `.env` file with the required environment variables.

5. Start the application:
   ```bash
   npm start
   ```

### Deployment with PM2

1. Install PM2:
   ```bash
   npm install -g pm2
   ```

2. Create a PM2 ecosystem file (`ecosystem.config.js`):
   ```javascript
   module.exports = {
     apps: [{
       name: 'taiga-task-master',
       script: 'dist/index.js',
       instances: 1,
       autorestart: true,
       watch: false,
       max_memory_restart: '1G',
       env: {
         NODE_ENV: 'production',
         // Other environment variables can be set here or in .env file
       }
     }]
   };
   ```

3. Start with PM2:
   ```bash
   pm2 start ecosystem.config.js
   ```

## Taiga Configuration

### Webhook Setup

1. In your Taiga project, go to Admin > Integrations > Webhooks.
2. Create a new webhook with the following settings:
   - Name: PRD Webhook
   - URL: https://your-server.com/api/prd-webhook
   - Secret: (same as WEBHOOK_SECRET environment variable)
   - Events: Task created, Task modified

### Swimlane Setup

1. In your Taiga project, go to Admin > Attributes > Swimlanes.
2. Create a new swimlane named "PRD" for PRD tasks.
3. Create a new swimlane named "Master Managed" for generated tasks.
4. Note the ID of the PRD swimlane and set it as PRD_SWIMLANE_ID environment variable.

## Monitoring and Maintenance

### Logs

Logs are stored in the following locations:

- All logs: `logs/all.log`
- Error logs: `logs/error.log`

In Docker deployment, logs are stored in mounted volumes.

### Failed Tasks

Failed task synchronizations are stored in the `sync-failures/` directory for later inspection and retry.

### Health Check

A health check endpoint is available at `/health` to verify the service is running.
```

3. Create `API.md`:
```markdown
# API Documentation

This document describes the API endpoints provided by the Taiga-Task-Master system.

## Authentication

All API endpoints require JWT authentication using the `Authorization` header:

```
Authorization: Bearer <jwt-token>
```

The JWT token should be signed with the secret specified in the `WEBHOOK_SECRET` environment variable.

## Endpoints

### Health Check

```
GET /health
```

Returns the health status of the service.

**Response:**
```json
{
  "status": "ok"
}
```

### PRD Webhook

```
POST /api/prd-webhook
```

Receives PRD updates from Taiga and initiates task generation.

**Headers:**
- `Authorization: Bearer <jwt-token>`
- `Content-Type: application/json`

**Request Body:**
```json
{
  "project": 12345,
  "ref": 67890,
  "content": "PRD content..."
}
```

**Response (Success):**
```json
{
  "success": true
}
```

**Response (Error):**
```json
{
  "error": "Error message"
}
```

## Error Codes

The API may return the following error codes:

| Code | Description |
|------|-------------|
| 400 | Bad Request - Invalid payload or task not in PRD swimlane |
| 401 | Unauthorized - Missing or invalid JWT token |
| 404 | Not Found - Endpoint not found |
| 500 | Internal Server Error - Server-side error |

## Rate Limiting

The API implements rate limiting to prevent abuse. The limits are as follows:

- 100 requests per minute for GET endpoints
- 30 requests per minute for POST endpoints

When rate limits are exceeded, the API will return a 429 Too Many Requests response.
```

# Test Strategy:
1. Verify README contains all required sections
2. Check deployment guide for completeness
3. Verify API documentation accuracy
4. Test documentation with users unfamiliar with the system
5. Verify all environment variables are documented
6. Check for broken links or references
7. Verify code examples are correct and up-to-date
8. Test deployment following the documented steps
