# Task ID: 8
# Title: Implement Taiga Synchronizer Module
# Status: pending
# Dependencies: 3, 4, 6, 7
# Priority: high
# Description: Create a service that implements the tasktracker-interface to synchronize generated tasks with Taiga, handling creation, updates, and conflict resolution.
# Details:
1. Implement the `SyncTasksF` interface defined in the tasktracker-interface package
2. Create functions for:
   - Finding existing tasks by master ID
   - Creating new tasks in Taiga
   - Updating existing tasks
   - Managing swimlanes
   - Handling batch operations
3. Implement retry logic for API failures
4. Add dead letter queue for failed operations
5. Implement proper error handling and logging
6. Create unit tests with mocked dependencies
7. Add rate limiting protection

The implementation should follow the interface contract and leverage the existing HTTP client and type system.

# Test Strategy:
1. Test task mapping from file content to tracker tasks
2. Mock Taiga client to test finding existing tasks
3. Test swimlane management (getting and creating)
4. Verify batch processing with different batch sizes
5. Test retry mechanism for failed operations
6. Verify dead letter queue functionality for persistently failing tasks
7. Test full synchronization workflow with various scenarios (new tasks, existing tasks, mixed)
8. Test handling of API rate limits
9. Verify conflict resolution strategy
10. Verify conformance to the SyncTasksF interface
