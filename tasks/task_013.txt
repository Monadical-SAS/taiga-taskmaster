# Task ID: 13
# Title: Implement Unit and Integration Tests
# Status: pending
# Dependencies: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
# Priority: medium
# Description: Create comprehensive test suite for all modules and components of the system.
# Details:
Set up a comprehensive testing framework:

1. Create `jest.config.js`:
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],
  transform: {
    '^.+\\.ts$': 'ts-jest'
  },
  collectCoverage: true,
  coverageDirectory: 'coverage',
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.d.ts',
    '!src/**/__tests__/**'
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  }
};
```

2. Create test utilities in `src/utils/__tests__/test-utils.ts`:
```typescript
import { TaigaTask } from '../../types/taiga';
import { SubtaskFileContent, TasksFileContent } from '../../types/tasks';

// Mock file system
export const createMockFileSystem = () => ({
  readFile: jest.fn().mockResolvedValue(''),
  writeFile: jest.fn().mockResolvedValue(undefined),
  mkdir: jest.fn().mockResolvedValue(undefined),
  rm: jest.fn().mockResolvedValue(undefined)
});

// Mock HTTP client
export const createMockHttpClient = () => ({
  get: jest.fn().mockResolvedValue({ data: {} }),
  post: jest.fn().mockResolvedValue({ data: {} }),
  patch: jest.fn().mockResolvedValue({ data: {} })
});

// Mock exec command
export const createMockExecCommand = () => jest.fn().mockResolvedValue(undefined);

// Sample tasks for testing
export const createSampleTasks = (): TasksFileContent => ({
  tasks: [
    {
      id: 1,
      title: 'Task 1',
      description: 'Description 1',
      status: 'New',
      details: 'Details 1',
      dependencies: []
    },
    {
      id: 2,
      title: 'Task 2',
      description: 'Description 2',
      status: 'In progress',
      details: 'Details 2',
      dependencies: [1]
    },
    {
      id: 3,
      title: 'Task 3',
      description: 'Description 3',
      status: 'Ready for test',
      details: 'Details 3',
      dependencies: [1, 2]
    }
  ]
});

// Sample Taiga tasks for testing
export const createSampleTaigaTasks = (): TaigaTask[] => [
  {
    id: 101,
    ref: 1,
    title: 'Task 1',
    description: 'Description 1',
    status: 'New',
    tags: ['project-tm:test-project', 'taskmaster-1'],
    project: 1
  },
  {
    id: 102,
    ref: 2,
    title: 'Task 2',
    description: 'Description 2',
    status: 'In progress',
    tags: ['project-tm:test-project', 'taskmaster-2'],
    project: 1
  }
];
```

3. Create sample tests for key modules:

`src/utils/__tests__/tags.test.ts`:
```typescript
import { createTags, extractMasterIdFromTag, findMasterIdInTags, isTaskmasterTag } from '../tags';

describe('Tag utilities', () => {
  beforeEach(() => {
    process.env.PROJECT_SLUG = 'test-project';
  });
  
  afterEach(() => {
    delete process.env.PROJECT_SLUG;
  });
  
  test('createTags should generate correct tag array', () => {
    const tags = createTags(123);
    expect(tags).toEqual(['project-tm:test-project', 'taskmaster-123']);
  });
  
  test('extractMasterIdFromTag should extract ID from valid tag', () => {
    const id = extractMasterIdFromTag('taskmaster-456');
    expect(id).toBe(456);
  });
  
  test('extractMasterIdFromTag should return null for invalid tag', () => {
    const id = extractMasterIdFromTag('invalid-tag');
    expect(id).toBeNull();
  });
  
  test('findMasterIdInTags should find ID in array of tags', () => {
    const tags = ['tag1', 'taskmaster-789', 'tag2'];
    const id = findMasterIdInTags(tags);
    expect(id).toBe(789);
  });
  
  test('findMasterIdInTags should return null if no matching tag', () => {
    const tags = ['tag1', 'tag2', 'tag3'];
    const id = findMasterIdInTags(tags);
    expect(id).toBeNull();
  });
  
  test('isTaskmasterTag should validate tags correctly', () => {
    expect(isTaskmasterTag('taskmaster-123')).toBe(true);
    expect(isTaskmasterTag('taskmaster-')).toBe(false);
    expect(isTaskmasterTag('taskmaster-abc')).toBe(false);
    expect(isTaskmasterTag('other-tag')).toBe(false);
  });
});
```

`src/modules/task-generation/__tests__/service.test.ts`:
```typescript
import { createTaskGenerator } from '../service';
import { createMockFileSystem, createMockExecCommand } from '../../../utils/__tests__/test-utils';

describe('Task Generator Service', () => {
  const mockFileSystem = createMockFileSystem();
  const mockExecCommand = createMockExecCommand();
  
  const taskGenerator = createTaskGenerator({
    tempDir: '/tmp/test',
    claudeTaskMasterPath: '/usr/bin/claude-task-master',
    fileSystem: mockFileSystem,
    execCommand: mockExecCommand
  });
  
  beforeEach(() => {
    jest.clearAllMocks();
  });
  
  test('generateTasks should create directory and files', async () => {
    // Mock file read to return valid JSON
    mockFileSystem.readFile.mockResolvedValueOnce(JSON.stringify({
      tasks: [
        { id: 1, title: 'Task 1', description: 'Desc 1', status: 'New' }
      ]
    }));
    
    await taskGenerator.generateTasks('PRD content');
    
    // Check directory was created
    expect(mockFileSystem.mkdir).toHaveBeenCalled();
    
    // Check PRD was written
    expect(mockFileSystem.writeFile).toHaveBeenCalledWith(
      expect.stringContaining('/prd.txt'),
      'PRD content',
      'utf-8'
    );
    
    // Check CLI was executed
    expect(mockExecCommand).toHaveBeenCalled();
    
    // Check cleanup was attempted
    expect(mockFileSystem.rm).toHaveBeenCalled();
  });
  
  test('generateTasks should handle CLI execution errors', async () => {
    mockExecCommand.mockRejectedValueOnce(new Error('CLI error'));
    
    await expect(taskGenerator.generateTasks('PRD content')).rejects.toThrow('Failed to generate tasks');
    
    // Check cleanup was still attempted
    expect(mockFileSystem.rm).toHaveBeenCalled();
  });
});
```

4. Install testing packages:
```bash
npm install jest ts-jest @types/jest --save-dev
```

5. Add test scripts to `package.json`:
```json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}
```

# Test Strategy:
1. Create unit tests for all utility functions
2. Test each module in isolation with mocked dependencies
3. Create integration tests for key workflows
4. Test error handling and edge cases
5. Verify code coverage meets thresholds
6. Test with both valid and invalid inputs
7. Create end-to-end tests for complete workflows
8. Test performance with large datasets
