# Task ID: 2
# Title: Implement Core Types and Interfaces
# Status: done
# Dependencies: 1
# Priority: high
# Description: Define TypeScript interfaces and types for the system based on the PRD requirements.
# Details:
1. Implement Effect Schema integration in `/packages/common/src/index.ts` and `/packages/common/src/tasks.ts`
2. Create comprehensive type system with branded types:
   - TaskId, TaskText, TrackerTask, PrdText, NonEmptyString
3. Implement TasksFileContent schema with dependency validation and filter logic
4. Add SubtaskId handling with string parsing for taskmaster CLI compatibility
5. Create robust test suite validating schema edge cases and dependency validation
6. Implement runtime validation with Effect Schema decode/encode patterns
7. Define interfaces for task generation and synchronization in separate packages
8. Establish dependency injection architecture with proper typing
9. Implement AsyncDisposable pattern for resource management

# Test Strategy:
1. Create unit tests for each type definition
2. Test schema validation with valid and invalid inputs
3. Verify that type constraints are enforced correctly
4. Test enum values match expected Taiga task statuses
5. Ensure optional fields are handled correctly
6. Verify dependency validation logic works correctly
7. Test branded types enforce proper constraints
8. Verify interface contracts are properly typed
