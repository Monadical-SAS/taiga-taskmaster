# Task ID: 4
# Title: Implement Error Type Propagation
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Ensure all functions properly type and propagate their error cases to maintain type safety throughout the codebase.
# Details:
1. Create a comprehensive error type hierarchy for the worker interface:
```typescript
export type WorkerError =
  | { _tag: 'EmptyCommandError'; message: string }
  | { _tag: 'CommandExecutionError'; command: string; exitCode: number; stderr: string }
  | { _tag: 'CommandTimeoutError'; command: string; timeout: number }
  | { _tag: 'FileSystemError'; path: string; operation: string; message: string };
```
2. Update all function signatures to include specific error types in their Effect/Stream return types
3. Ensure executeTask() and similar functions properly type their error cases
4. Update error handling code to use pattern matching on error types

# Test Strategy:
1. Write tests that verify each error type is correctly propagated
2. Test error recovery paths to ensure they handle specific error types
3. Create test scenarios that trigger each error condition
4. Verify TypeScript compiler catches incompatible error handling
