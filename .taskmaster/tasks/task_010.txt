# Task ID: 10
# Title: Fix Shell Injection Risk
# Status: done
# Dependencies: 3
# Priority: high
# Description: Address the security vulnerability where user-controlled input is directly passed to shell commands without proper escaping.
# Details:
1. Remove shell composition and use proper command arrays:
```typescript
// Instead of string composition like: `cd "${workingDir}" && ${commandString}`
// Use proper command execution:
const executeInDirectory = (cmd: string, args: string[], workingDir: string) =>
  Effect.gen(function* (_) {
    // Use proper options object with cwd instead of cd command
    const options = { cwd: workingDir };
    return yield* _(executeCommand({ cmd, args }, options));
  });
```
2. Use a shell escaping library if shell commands are absolutely necessary
3. Validate all user inputs before using in commands
4. Add security documentation about command handling

# Test Strategy:
1. Create security-focused tests with malicious input patterns
2. Test with inputs containing shell metacharacters
3. Verify command injection is not possible
4. Create tests that explicitly verify security properties
